@model GestionAcademica.Models.Usuario

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Editar Usuario";
}

<div class="container mt-5">
    <h2 class="text-primary mb-4">Editar Usuario</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <!-- Campo oculto para enviar el ID sin mostrarlo en la vista -->
        @Html.HiddenFor(model => model.IdUsuario)

        <div class="card shadow">
            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                <div class="row mb-3">
                    @Html.LabelFor(model => model.Nombre, "Nombre", htmlAttributes: new { @class = "col-sm-2 col-form-label fw-bold" })
                    <div class="col-sm-10">
                        @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control", placeholder = "Ingrese el nombre del usuario" } })
                        @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    @Html.LabelFor(model => model.CodUsuario, "Código de Usuario", htmlAttributes: new { @class = "col-sm-2 col-form-label fw-bold" })
                    <div class="col-sm-10">
                        @Html.EditorFor(model => model.CodUsuario, new { htmlAttributes = new { @class = "form-control", placeholder = "El código se generará automáticamente" } })
                        @Html.ValidationMessageFor(model => model.CodUsuario, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    @Html.LabelFor(model => model.Password, "Contraseña", htmlAttributes: new { @class = "col-sm-2 col-form-label fw-bold" })
                    <div class="col-sm-10 input-group">
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", placeholder = "Ingrese una contraseña" } })
                        <button type="button" class="btn btn-outline-secondary" onclick="togglePasswordVisibility()">
                            <i class="bi bi-eye"></i>
                        </button>
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    @Html.LabelFor(model => model.IdRol, "Rol", htmlAttributes: new { @class = "col-sm-2 col-form-label fw-bold" })
                    <div class="col-sm-10">
                        @Html.DropDownListFor(model => model.IdRol, (SelectList)ViewBag.lstRoles, "Seleccione el rol", new { @class = "form-select" })
                        @Html.ValidationMessageFor(model => model.IdRol, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="card-footer text-end">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-check-circle"></i> Guardar
                </button>
                @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-secondary ms-2" })
            </div>
        </div>
    }
</div>

<script>
    function togglePasswordVisibility() {
        const passwordField = document.querySelector('input[name="Password"]');
        const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordField.setAttribute('type', type);
    }
</script>
